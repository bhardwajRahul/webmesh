name: Tests and Build
on:
  push:
    branches: [main]
    tags: [v*]
  pull_request:
    branches: [main]

env:
  ALPINE_IMAGE_NAME: ghcr.io/webmeshproj/node
  DISTROLESS_IMAGE_NAME: ghcr.io/webmeshproj/node-distroless
  GO_VERSION: ^1.21
  GOLANGCI_LINT_VERSION: v1.54.2
  DOCKER_PLATFORMS: linux/amd64,linux/arm64,linux/arm,linux/386,linux/ppc64le,linux/s390x
  DISTROLESS_PLATFORMS: linux/amd64,linux/arm64,linux/arm,linux/386,linux/ppc64le,linux/s390x
  BUILD_PARALLELISM: 8
  TEST_PARALLELISM: 8
  WIN_TEST_PARALLELISM: 4

jobs:
  lint:
    name: Static Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: "read"
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: go.sum

      - name: Download Go Modules
        shell: bash
        run: go mod download -x

      - name: Run Linting
        uses: golangci/golangci-lint-action@v3
        with:
          version: ${{ env.GOLANGCI_LINT_VERSION }}
          args: --timeout 10m
          skip-pkg-cache: true

  tests:
    name: Unit Tests
    needs: [lint]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    permissions:
      contents: "read"
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: go.sum

      - name: Run Unit Tests
        shell: bash
        env:
          # Lower test parallelism to avoid OOM on Windows
          TEST_PARALLEL: ${{ matrix.os == 'windows-latest' && env.WIN_TEST_PARALLELISM || env.TEST_PARALLELISM }}
          RICHGO_FORCE_COLOR: 1
        run: make ci-test

  build-binaries:
    name: Build Binary Artifacts
    runs-on: macos-latest
    needs: [tests]
    permissions:
      contents: "write"
      id-token: "write"
      packages: "write"
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: go.sum

      - name: Setup Cosign
        uses: sigstore/cosign-installer@main

      - name: Run Snapshot Release
        uses: goreleaser/goreleaser-action@v4
        if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        with:
          version: latest
          args: release --snapshot --clean --fail-fast --parallelism=${{ env.BUILD_PARALLELISM }}

      - name: Run Release
        uses: goreleaser/goreleaser-action@v4
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
          HOMEBREW_TAP_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN }}
        with:
          version: latest
          args: release --clean --fail-fast --parallelism=${{ env.BUILD_PARALLELISM }}

  build-containers:
    name: Build Containers
    runs-on: ubuntu-latest
    needs: [tests]
    permissions:
      contents: "write"
      id-token: "write"
      packages: "write"
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: go.sum

      - name: Setup Cosign
        uses: sigstore/cosign-installer@main

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v2

      - name: Compute Image Tags
        shell: bash
        id: image-tags
        run: |
          ALPINE_IMAGES="${ALPINE_IMAGE_NAME}:latest,${ALPINE_IMAGE_NAME}:${{ github.sha }}"
          DISTROLESS_IMAGES="${DISTROLESS_IMAGE_NAME}:latest,${DISTROLESS_IMAGE_NAME}:${{ github.sha }}"
          if [[ ${{ github.ref }} =~ ^refs/tags/v.* ]] ; then
              ALPINE_IMAGES+=",${ALPINE_IMAGE_NAME}:${{ github.ref_name }}"
              DISTROLESS_IMAGES+=",${DISTROLESS_IMAGE_NAME}:${{ github.ref_name }}"
          fi
          echo "alpine-images=${ALPINE_IMAGES}" >> "${GITHUB_OUTPUT}"
          echo "distroless-images=${DISTROLESS_IMAGES}" >> "${GITHUB_OUTPUT}"

      - name: Run Snapshot Build
        uses: goreleaser/goreleaser-action@v4
        if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        with:
          version: latest
          args: build --snapshot --clean --id node-docker-linux --parallelism=${{ env.BUILD_PARALLELISM }}

      - name: Run Build
        uses: goreleaser/goreleaser-action@v4
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        with:
          version: latest
          args: build --clean --id node-docker-linux --parallelism=${{ env.BUILD_PARALLELISM }}

      - name: Login to GHCR
        uses: docker/login-action@v2
        if: ${{ github.event_name != 'pull_request' }}
        with:
          registry: "ghcr.io"
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Build Alpine Container Images
        uses: docker/build-push-action@v4
        id: alpine-build
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.image-tags.outputs.alpine-images }}
          platforms: ${{ env.DOCKER_PLATFORMS }}
          build-args: PREFIX=node-docker-linux

      - name: Build Distroless Container Images
        uses: docker/build-push-action@v4
        id: distroless-build
        with:
          context: .
          file: Dockerfile.distroless
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.image-tags.outputs.distroless-images }}
          platforms: ${{ env.DISTROLESS_PLATFORMS }}
          build-args: PREFIX=node-docker-linux

      - name: Sign Container Images
        shell: bash
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          cosign sign --yes --recursive ${ALPINE_IMAGE_NAME}@${{ steps.alpine-build.outputs.digest }}
          cosign sign --yes --recursive ${DISTROLESS_IMAGE_NAME}@${{ steps.distroless-build.outputs.digest }}
