version: "3"

networks:
  site1:
    enable_ipv6: true
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 10.1.0.0/24
          gateway: 10.1.0.1
        - subnet: 2001:3200:3201::/64
          gateway: 2001:3200:3201::1
  site2:
    enable_ipv6: true
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 10.2.0.0/24
          gateway: 10.2.0.1
        - subnet: 2001:3200:3202::/64
          gateway: 2001:3200:3202::1

services:
  site-1-node:
    image: ${IMAGE:-ghcr.io/webmeshproj/node:latest}
    build:
      context: ../..
      dockerfile: Dockerfile
    networks:
      site1:
        ipv4_address: 10.1.0.2
        ipv6_address: 2001:3200:3201::2
    hostname: site-1-node
    cap_add: ["NET_ADMIN", "NET_RAW", "SYS_MODULE"]
    sysctls:
      - net.ipv6.conf.all.disable_ipv6=0
    entrypoint:
      - /webmesh-node
      # Typical insecure/private testing options
      - --global.insecure
      - --global.detect-endpoints
      - --global.detect-private-endpoints
      - --raft.in-memory
      # Bootstrap a new mesh with the domain site-1.internal.
      # We can leave the default and it won't affect DNS later, unless there are overlaps,
      # but that is intended only for testing.
      - --bootstrap.enabled
      - --bootstrap.mesh-domain=site-1.internal
      - --bootstrap.disable-rbac
      # Run a local meshdns server and subscribe to forwarders for other domains
      - --services.meshdns.enabled
      - --services.meshdns.subscribe-forwarders
      # Set the system resolvers to the meshdns resolver
      - --mesh.use-meshdns

  site-2-node:
    image: ${IMAGE:-ghcr.io/webmeshproj/node:latest}
    build:
      context: ../..
      dockerfile: Dockerfile
    networks:
      site2:
        ipv4_address: 10.2.0.2
        ipv6_address: 2001:3200:3202::2
    hostname: site-2-node
    cap_add: ["NET_ADMIN", "NET_RAW", "SYS_MODULE"]
    sysctls:
      - net.ipv6.conf.all.disable_ipv6=0
    entrypoint:
      - /webmesh-node
      # Typical insecure/private testing options
      - --global.insecure
      - --global.detect-endpoints
      - --global.detect-private-endpoints
      - --raft.in-memory
      # Same as above, but with the domain site-2.internal.
      - --bootstrap.enabled
      - --bootstrap.mesh-domain=site-2.internal
      - --bootstrap.disable-rbac
      - --services.meshdns.enabled
      - --services.meshdns.subscribe-forwarders
      - --mesh.use-meshdns

  bridge-node:
    image: ${IMAGE:-ghcr.io/webmeshproj/node:latest}
    build:
      context: ../..
      dockerfile: Dockerfile
    networks:
      site1:
        ipv4_address: 10.1.0.3
        ipv6_address: 2001:3200:3201::3
      site2:
        ipv4_address: 10.2.0.3
        ipv6_address: 2001:3200:3202::3
    hostname: bridge-node
    cap_add: ["NET_ADMIN", "NET_RAW", "SYS_MODULE"]
    sysctls:
      - net.ipv6.conf.all.disable_ipv6=0
      - net.ipv4.ip_forward=1
      # At the very least ipv6 forwarding is required for bridged
      # meshes to be able to communicate with each other.
      - net.ipv6.conf.all.forwarding=1
    entrypoint:
      - /webmesh-node
      - --global.insecure
      - --global.detect-endpoints
      - --global.detect-private-endpoints
      # Site 1 Options
      - --bridge.site-1.mesh.join-address=site-1-node:8443
      - --bridge.site-1.raft.in-memory
      - --bridge.site-1.wireguard.listen-port=51821
      - --bridge.site-1.wireguard.interface-name=wgsite1
      - --bridge.site-1.services.grpc-listen-address=:8443
      - --bridge.site-1.raft.listen-address=:9443
      - --bridge.site-2.raft.request-observer
      # Site 2 Options
      - --bridge.site-2.mesh.join-address=site-2-node:8443
      - --bridge.site-2.raft.in-memory
      - --bridge.site-2.wireguard.listen-port=51822
      - --bridge.site-2.wireguard.interface-name=wgsite2
      - --bridge.site-2.services.grpc-listen-address=:8444
      - --bridge.site-2.raft.listen-address=:9444
      - --bridge.site-2.raft.request-observer
      # Bridged DNS Options. The DNS server will handle queries for both
      # site-1.internal and site-2.internal and act as a forwarder for each.
      - --bridge.meshdns.enabled
